// <auto-generated />
using System;
using CineMate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CineMate.Migrations
{
    [DbContext(typeof(CineMateDbContext))]
    partial class CineMateDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CineMate.Data.Entities.CineMate.Data.Entities.ReservationSeat", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CategoryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ReservationId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("ReservationSeats");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Cinemas");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CityId = -1,
                            Name = "CineMate Sofia Central"
                        },
                        new
                        {
                            Id = -2,
                            CityId = -1,
                            Name = "CineMate Mall of Sofia"
                        },
                        new
                        {
                            Id = -3,
                            CityId = -1,
                            Name = "CineMate Paradise"
                        },
                        new
                        {
                            Id = -4,
                            CityId = -1,
                            Name = "CineMate Arena Mladost"
                        },
                        new
                        {
                            Id = -5,
                            CityId = -1,
                            Name = "CineMate The Mall"
                        },
                        new
                        {
                            Id = -6,
                            CityId = -2,
                            Name = "CineMate Plovdiv Mall"
                        },
                        new
                        {
                            Id = -7,
                            CityId = -2,
                            Name = "CineMate Central Park"
                        },
                        new
                        {
                            Id = -8,
                            CityId = -3,
                            Name = "CineMate Mall Varna"
                        },
                        new
                        {
                            Id = -9,
                            CityId = -3,
                            Name = "CineMate Sea Garden"
                        });
                });

            modelBuilder.Entity("CineMate.Data.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Varna"
                        });
                });

            modelBuilder.Entity("CineMate.Data.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Director = "TBA",
                            DurationMinutes = 120,
                            Genre = "Sports Drama",
                            ReleaseYear = 2025,
                            Synopsis = "A behind-the-scenes look at the rivalries and politics of Formula 1.",
                            Title = "F1"
                        },
                        new
                        {
                            Id = 2,
                            Director = "Colin Trevorrow",
                            DurationMinutes = 140,
                            Genre = "Adventure / Sci-Fi",
                            ReleaseYear = 2025,
                            Synopsis = "Scientists’ attempt to fully resurrect dinosaurs leads to catastrophic consequences.",
                            Title = "Jurassic World: Rebirth"
                        },
                        new
                        {
                            Id = 3,
                            Director = "James Gunn",
                            DurationMinutes = 130,
                            Genre = "Superhero / Action",
                            ReleaseYear = 2025,
                            Synopsis = "Clark Kent defends Metropolis from a mysterious Kryptonian threat.",
                            Title = "Superman (2025)"
                        },
                        new
                        {
                            Id = 4,
                            Director = "Jonas Reiss",
                            DurationMinutes = 125,
                            Genre = "Superhero / Adventure",
                            ReleaseYear = 2025,
                            Synopsis = "A young team of scientists gains cosmic powers after a space radiation accident.",
                            Title = "The Fantastic Four: First Steps"
                        },
                        new
                        {
                            Id = 5,
                            Director = "Juan Carlos Fresnadillo",
                            DurationMinutes = 112,
                            Genre = "Horror / Post-Apocalyptic",
                            ReleaseYear = 2025,
                            Synopsis = "Decades after the initial outbreak, survivors struggle against a new viral strain.",
                            Title = "28 Years Later"
                        },
                        new
                        {
                            Id = 6,
                            Director = "Louis Leterrier",
                            DurationMinutes = 110,
                            Genre = "Crime Thriller",
                            ReleaseYear = 2025,
                            Synopsis = "The Four Horsemen return to execute an even more daring heist under the FBI’s nose.",
                            Title = "Now You See Me: Now You Don't"
                        },
                        new
                        {
                            Id = 7,
                            Director = "Christopher McQuarrie",
                            DurationMinutes = 147,
                            Genre = "Action / Spy",
                            ReleaseYear = 2025,
                            Synopsis = "Ethan Hunt uncovers an international conspiracy threatening his team’s safety.",
                            Title = "Mission: Impossible – Retribution"
                        },
                        new
                        {
                            Id = 8,
                            Director = "Sarah Johnson",
                            DurationMinutes = 98,
                            Genre = "Psychological Thriller",
                            ReleaseYear = 2024,
                            Synopsis = "A therapist confronts her own dark past when treating a mysterious new patient.",
                            Title = "Sinners"
                        },
                        new
                        {
                            Id = 9,
                            Director = "Byron Howard & Rich Moore",
                            DurationMinutes = 105,
                            Genre = "Animation / Adventure",
                            ReleaseYear = 2025,
                            Synopsis = "Judy Hopps and Nick Wilde uncover a new threat to the peace between predators and prey.",
                            Title = "Zootopia 2"
                        },
                        new
                        {
                            Id = 10,
                            Director = "Kelly Asbury",
                            DurationMinutes = 90,
                            Genre = "Animation / Family",
                            ReleaseYear = 2023,
                            Synopsis = "The Smurfs return to our world to stop Gargamel’s latest evil scheme.",
                            Title = "The Smurfs"
                        },
                        new
                        {
                            Id = 11,
                            Director = "Dean Devlin",
                            DurationMinutes = 85,
                            Genre = "Animation / Adventure",
                            ReleaseYear = 2025,
                            Synopsis = "Lilo and her alien friend Stitch embark on new adventures in the Hawaiian islands.",
                            Title = "Lilo & Stitch (2025)"
                        });
                });

            modelBuilder.Entity("CineMate.Data.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("MovieId");

                    b.ToTable("Screenings");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ScreeningId", "Row", "Number")
                        .IsUnique();

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a1111111-aaaa-4aaa-aaaa-aaaaaaaaaaa1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "b2222222-bbbb-4bbb-bbbb-bbbbbbbbbbb2",
                            Name = "Operator",
                            NormalizedName = "OPERATOR"
                        },
                        new
                        {
                            Id = "c3333333-cccc-4ccc-cccc-ccccccccccc3",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e5555555-eeee-4eee-eeee-eeeeeeeeeee5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e17f378-790e-4f27-83bc-f5060ab40bd9",
                            Email = "admin@cinemate.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@CINEMATE.LOCAL",
                            NormalizedUserName = "ADMIN@CINEMATE.LOCAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJWCj4HigB81NKOZbjuChLcrxOHzlnOV/soAEAD69RePppEoxQAn+yVZYoAdoLh5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f3f6132-88de-4070-bfaa-722675d65f2e",
                            TwoFactorEnabled = false,
                            UserName = "admin@cinemate.local"
                        },
                        new
                        {
                            Id = "f6666666-ffff-4fff-ffff-fffffffffff6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92f9c62c-d112-4a88-917c-63113b54b9e2",
                            Email = "operator@cinemate.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPERATOR@CINEMATE.LOCAL",
                            NormalizedUserName = "OPERATOR@CINEMATE.LOCAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEH9i9lt7HNluyB2eRJseaagTuuEQRY0hvgT+JXDuIGeHYFvnbIy5XGCMMvDQ0a2mWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68498975-9da3-41d5-ae5f-6fcc8cd6406e",
                            TwoFactorEnabled = false,
                            UserName = "operator@cinemate.local"
                        },
                        new
                        {
                            Id = "d4444444-dddd-4ddd-dddd-dddddddddddd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d05a4601-41fb-47a0-a191-f5f044cbdde1",
                            Email = "demo@cinemate.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO@CINEMATE.LOCAL",
                            NormalizedUserName = "DEMO@CINEMATE.LOCAL",
                            PasswordHash = "AQAAAAIAAYagAAAAELB8XQbq9GRrDm2esFPacf/oPC1s40oL6h27Lr8eDEGNss1oNmKVgE4PEHoNuYKNwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c715f65a-40ad-4020-8a68-0eb5f10a559f",
                            TwoFactorEnabled = false,
                            UserName = "demo@cinemate.local"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e5555555-eeee-4eee-eeee-eeeeeeeeeee5",
                            RoleId = "a1111111-aaaa-4aaa-aaaa-aaaaaaaaaaa1"
                        },
                        new
                        {
                            UserId = "f6666666-ffff-4fff-ffff-fffffffffff6",
                            RoleId = "b2222222-bbbb-4bbb-bbbb-bbbbbbbbbbb2"
                        },
                        new
                        {
                            UserId = "d4444444-dddd-4ddd-dddd-dddddddddddd",
                            RoleId = "c3333333-cccc-4ccc-cccc-ccccccccccc3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CineMate.Data.Entities.CineMate.Data.Entities.ReservationSeat", b =>
                {
                    b.HasOne("CineMate.Data.Entities.Reservation", "Reservation")
                        .WithMany("ReservationSeats")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CineMate.Data.Entities.Seat", "Seat")
                        .WithMany("ReservationSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Cinema", b =>
                {
                    b.HasOne("CineMate.Data.Entities.City", "City")
                        .WithMany("Cinemas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Payment", b =>
                {
                    b.HasOne("CineMate.Data.Entities.Reservation", "Reservation")
                        .WithOne("Payment")
                        .HasForeignKey("CineMate.Data.Entities.Payment", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Reservation", b =>
                {
                    b.HasOne("CineMate.Data.Entities.Screening", "Screening")
                        .WithMany()
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Screening", b =>
                {
                    b.HasOne("CineMate.Data.Entities.Cinema", "Cinema")
                        .WithMany("Screenings")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineMate.Data.Entities.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Seat", b =>
                {
                    b.HasOne("CineMate.Data.Entities.Reservation", null)
                        .WithMany("Seats")
                        .HasForeignKey("ReservationId");

                    b.HasOne("CineMate.Data.Entities.Screening", "Screening")
                        .WithMany("Seats")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CineMate.Data.Entities.Cinema", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CineMate.Data.Entities.City", b =>
                {
                    b.Navigation("Cinemas");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Movie", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Reservation", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("ReservationSeats");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Screening", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("CineMate.Data.Entities.Seat", b =>
                {
                    b.Navigation("ReservationSeats");
                });
#pragma warning restore 612, 618
        }
    }
}
