@model CineMate.Models.SelectSeatsViewModel
@{
    ViewData["Title"] = "Select Seats";
}

<div class="hero-band d-flex align-items-start justify-content-between">
    <div class="me-3">
        <h1 class="hero-title">Select seats for @Model.Screening?.Movie?.Title</h1>
        <div class="hero-sub">
            @Model.Screening?.Cinema?.Name • @Model.Screening?.StartTime.ToString("dd.MM.yyyy • HH:mm")
        </div>
    </div>

    @if (User.IsInRole("Administrator") || User.IsInRole("Operator"))
    {
        <div class="btn-toolbar gap-2">
            <a asp-controller="Screenings"
               asp-action="Edit"
               asp-route-id="@Model.ScreeningId"
               class="btn btn-outline-light btn-sm">
                Edit
            </a>

            <form asp-controller="Screenings"
                  asp-action="Delete"
                  asp-route-id="@Model.ScreeningId"
                  method="post"
                  class="d-inline"
                  onsubmit="return confirm('Delete this screening? All related reservations will be removed.');">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
            </form>
        </div>
    }
</div>

<form asp-action="SelectSeats" asp-route-id="@Model.ScreeningId" method="post">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="ScreeningId" />

    <div class="card mb-3 p-4 text-center">
        <div class="screen mb-4">SCREEN</div>

        <table class="seat-map mx-auto">
            <thead>
                <tr>
                    <th class="corner"></th>
                    @for (int seatNum = 1; seatNum <= 10; seatNum++)
                    {
                        <th class="col-num">@seatNum</th>
                    }
                </tr>
            </thead>
            <tbody>
                @{
                    var grouped = Model.Seats
                    .OrderBy(s => s.Row)
                    .ThenBy(s => s.Number)
                    .GroupBy(s => s.Row)
                    .ToDictionary(g => g.Key, g => g.ToList());
                }
                @for (int row = 1; row <= 7; row++)
                {
                    var seatsInRow = grouped.ContainsKey(row) ? grouped[row] : new List<CineMate.Data.Entities.Seat>();
                    <tr>
                        <th class="row-num">Row @row</th>
                        @for (int seatNum = 1; seatNum <= 10; seatNum++)
                        {
                            var seat = seatsInRow.FirstOrDefault(s => s.Number == seatNum);
                            if (seat is null)
                            {
                                <td class="empty"></td>
                            }
                            else
                            {
                                var isChecked = (Model.SelectedSeatIds?.Contains(seat.Id) ?? false);
                                <td>
                                    <label class="seat-wrap" title="@($"R{row}-N{seatNum}")">
                                        <input type="checkbox"
                                               class="seat-input"
                                               name="SelectedSeatIds"
                                               value="@seat.Id"
                                        @(isChecked ? "checked" : null)
                                        @(seat.IsAvailable ? null : "disabled")
                                               aria-label="@($"Row {row}, Seat {seatNum}")" />
                                        <span class="seat-box @(seat.IsAvailable ? "" : "taken")">
                                            @seatNum
                                        </span>
                                    </label>
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>

        <div class="legend mt-3">
            <span><span class="legend-box available"></span> Available</span>
            <span><span class="legend-box selected"></span> Selected</span>
            <span><span class="legend-box taken"></span> Taken</span>
        </div>

        <span asp-validation-for="SelectedSeatIds" class="text-danger d-block mt-2"></span>
    </div>

    <div class="card mb-3 p-3">
        <h4 class="mb-2">Ticket category</h4>
        <div class="d-flex gap-3 flex-wrap">
            <label class="form-check">
                <input type="radio" class="form-check-input" asp-for="SelectedCategory" value="Adult" />
                <span class="form-check-label">Adult (16 BGN)</span>
            </label>
            <label class="form-check">
                <input type="radio" class="form-check-input" asp-for="SelectedCategory" value="Teen" />
                <span class="form-check-label">Teen (11 BGN)</span>
            </label>
            <label class="form-check">
                <input type="radio" class="form-check-input" asp-for="SelectedCategory" value="Kids" />
                <span class="form-check-label">Kids (7 BGN)</span>
            </label>
        </div>
        <span asp-validation-for="SelectedCategory" class="text-danger"></span>
    </div>

    <div class="d-flex gap-2">
        <button type="submit" name="mode" value="reserve" class="btn btn-primary">Reserve now</button>
        <button type="submit" name="mode" value="cart" class="btn btn-outline-secondary">Add to cart</button>
        <a asp-action="Details" asp-route-id="@Model.ScreeningId" class="btn btn-secondary">Back</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

<style>
    .card {
        border: 1px solid #e5e5e5;
        border-radius: 12px;
    }

    .screen {
        width: min(700px, 90%);
        margin-inline: auto;
        background: linear-gradient(to bottom, #e9ecef, #dfe3e7);
        border: 1px solid #d0d5db;
        border-radius: 8px;
        padding: 6px 0;
        font-weight: 600;
        letter-spacing: .08em;
    }

    .seat-map {
        border-collapse: separate;
        border-spacing: 6px;
    }

        .seat-map th, .seat-map td {
            text-align: center;
        }

        .seat-map .corner {
            width: 58px;
        }

        .seat-map .col-num {
            width: 42px;
            font-weight: 600;
            color: #6c757d;
        }

        .seat-map .row-num {
            text-align: right;
            padding-right: 8px;
            color: #6c757d;
            font-weight: 600;
        }

    .seat-wrap {
        position: relative;
        display: inline-block;
    }

    .seat-input {
        position: absolute;
        inset: 0;
        opacity: 0;
        cursor: pointer;
    }

    .seat-box {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 38px;
        height: 38px;
        border: 1px solid #d0d7de;
        border-radius: 10px;
        background: #fff;
        box-shadow: 0 1px 0 rgba(16,24,40,.04);
        font-size: .95rem;
        user-select: none;
        transition: transform .05s, box-shadow .15s, background .15s, border-color .15s;
    }

    .seat-input:not(:disabled):hover + .seat-box {
        box-shadow: 0 2px 6px rgba(16,24,40,.12);
    }

    .seat-input:not(:disabled):active + .seat-box {
        transform: scale(.98);
    }

    .seat-input:checked + .seat-box {
        background: #e7f1ff;
        border-color: #0d6efd;
        box-shadow: 0 0 0 3px rgba(13,110,253,.15);
        font-weight: 600;
    }

    .seat-box.taken {
        background: #f1f3f5;
        border-color: #e0e3e7;
        color: #98a2b3;
        text-decoration: line-through;
    }

    .seat-input:disabled {
        cursor: not-allowed;
    }

    .legend {
        display: flex;
        gap: 18px;
        justify-content: center;
        color: #6c757d;
    }

    .legend-box {
        display: inline-block;
        width: 16px;
        height: 16px;
        border-radius: 4px;
        margin-right: 6px;
        border: 1px solid #d0d7de;
        vertical-align: -3px;
    }

        .legend-box.available {
            background: #fff;
        }

        .legend-box.selected {
            background: #e7f1ff;
            border-color: #0d6efd;
            box-shadow: inset 0 0 0 1px #0d6efd;
        }

        .legend-box.taken {
            background: #f1f3f5;
            border-color: #e0e3e7;
        }

    .legend span {
        font-size: .95rem;
    }
</style>
