@model IEnumerable<CineMate.Data.Entities.Screening>
@using System.Globalization
@using CineMate.Data.Entities

@{
    ViewData["Title"] = "Screenings";

    var cinemaName = Model?
        .Select(s => s.Cinema?.Name)
        .FirstOrDefault(n => !string.IsNullOrWhiteSpace(n)) ?? "Screenings";

    var cityName = Model?
        .Select(s => s.Cinema?.City?.Name)
        .FirstOrDefault(n => !string.IsNullOrWhiteSpace(n)) ?? "";

    var ordered = (Model ?? Enumerable.Empty<CineMate.Data.Entities.Screening>())
        .OrderBy(s => s.StartTime)
        .ToList();

    var dateKeys = ordered
        .Select(s => s.StartTime.Date)
        .Distinct()
        .OrderBy(d => d)
        .Take(7)
        .ToList();

    string DayLabel(DateTime d) => d.ToString("ddd, dd MMM", CultureInfo.CurrentUICulture);
    string TimeLabel(DateTime dt) => dt.ToString("HH:mm", CultureInfo.CurrentUICulture);
}

@section Styles {
    <style>
        :root {
            --bg: #0d1117;
            --bg2: #151b23;
            --card: #0f141b;
            --line: #1f2833;
            --muted: #9fb0c3;
            --text: #e9eef6;
            --brand: #ff8c2a;
        }

        .hero {
            border-radius: 18px;
            padding: 28px;
            margin-bottom: 18px;
            color: #fff;
            background: radial-gradient(900px 420px at 12% -20%, rgba(99,102,241,.35), transparent 60%), radial-gradient(700px 360px at 100% 0%, rgba(236,72,153,.25), transparent 60%), linear-gradient(180deg,#0d1117 0%,#151b23 100%);
        }

        .date-tabs {
            position: static;
            background: radial-gradient(900px 420px at 12% -20%, rgba(99,102,241,.35), transparent 60%), radial-gradient(700px 360px at 100% 0%, rgba(236,72,153,.25), transparent 60%), linear-gradient(180deg,#0d1117 0%,#151b23 100%);
            padding: 14px 0;
            margin: 0 0 16px;
            border-radius: 14px;
        }

            .date-tabs .wrap {
                display: flex;
                gap: 8px;
                flex-wrap: wrap;
                justify-content: center;
            }

        .chip {
            display: inline-flex;
            align-items: center;
            gap: .5rem;
            padding: .45rem .9rem;
            border-radius: 999px;
            background: rgba(255,255,255,.08);
            border: 1px solid rgba(255,255,255,.15);
            color: #fff;
            cursor: pointer;
            user-select: none;
            transition: all .15s ease-in-out;
        }

            .chip:hover, .chip.active {
                background: rgba(255,255,255,.25);
                border-color: rgba(255,255,255,.40);
                color: #fff;
            }

        .scr-card {
            background: var(--card);
            border: 1px solid var(--line);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 8px 24px rgba(0,0,0,.25);
            transition: .18s;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

            .scr-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 12px 24px rgba(0,0,0,.35);
            }

        .scr-thumb {
            aspect-ratio: 2 / 3;
            background: #0b0e13;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 6px;
        }

            .scr-thumb img {
                width: 100%;
                height: 100%;
                object-fit: contain;
                border-radius: 12px;
                display: block;
            }

        .scr-body {
            padding: 14px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .scr-title {
            font-weight: 700;
            margin: 0;
            color: var(--text);
        }

        .times {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .time-btn {
            border: 1px solid #2b3544;
            background: #131a23;
            color: #dbe6f6;
            border-radius: 10px;
            padding: .5rem .75rem;
            font-weight: 600;
            font-size: .95rem;
            display: inline-block;
        }

            .time-btn:hover {
                background: #1a2230;
                text-decoration: none;
                color: #fff;
            }

        h3.day-title {
            color: #111827;
            background: #e5e7eb;
            display: inline-block;
            padding: .25rem .6rem;
            border-radius: 10px;
            margin: 14px 0 10px;
            font-weight: 800;
            font-size: 1.05rem;
            letter-spacing: .2px;
        }

        .empty {
            border: 1px dashed #2b3544;
            border-radius: 16px;
            padding: 28px;
            text-align: center;
            color: #96a6bb;
        }
    </style>
}

<div class="hero">
    <h1 class="display-6 m-0">@cinemaName</h1>
    <div class="mt-3 d-flex gap-2 flex-wrap">
        @if (!string.IsNullOrWhiteSpace(cityName))
        {
            <span class="chip">@cityName</span>
        }
        <span class="chip">Cinema program</span>
    </div>
</div>

@{
    var activeFormat = (string?)ViewBag.Format ?? "";
    var activeAudio = (string?)ViewBag.Audio ?? "";
    string A(string v, string a) => v == a ? "active" : "";
}

<div class="container px-0 mb-2">
    <div class="d-flex gap-2 flex-wrap">
        <!-- Format -->
        <div>
            <span class="text-muted me-2">Format:</span>
            <a class="chip @A(activeFormat,"")" asp-action="Index" asp-route-cityId="@Context.Request.Query["cityId"]" asp-route-cinemaId="@Context.Request.Query["cinemaId"]" asp-route-format="" asp-route-audio="@activeAudio">All</a>
            <a class="chip @A(activeFormat,"2d")" asp-action="Index" asp-route-cityId="@Context.Request.Query["cityId"]" asp-route-cinemaId="@Context.Request.Query["cinemaId"]" asp-route-format="2d" asp-route-audio="@activeAudio">2D</a>
            <a class="chip @A(activeFormat,"3d")" asp-action="Index" asp-route-cityId="@Context.Request.Query["cityId"]" asp-route-cinemaId="@Context.Request.Query["cinemaId"]" asp-route-format="3d" asp-route-audio="@activeAudio">3D</a>
            <a class="chip @A(activeFormat,"imax")" asp-action="Index" asp-route-cityId="@Context.Request.Query["cityId"]" asp-route-cinemaId="@Context.Request.Query["cinemaId"]" asp-route-format="imax" asp-route-audio="@activeAudio">IMAX</a>
        </div>

        <!-- Audio -->
        <div class="ms-3">
            <span class="text-muted me-2">Audio:</span>
            <a class="chip @A(activeAudio,"")" asp-action="Index" asp-route-cityId="@Context.Request.Query["cityId"]" asp-route-cinemaId="@Context.Request.Query["cinemaId"]" asp-route-format="@activeFormat" asp-route-audio="">All</a>
            <a class="chip @A(activeAudio,"sub")" asp-action="Index" asp-route-cityId="@Context.Request.Query["cityId"]" asp-route-cinemaId="@Context.Request.Query["cinemaId"]" asp-route-format="@activeFormat" asp-route-audio="sub">Sub</a>
            <a class="chip @A(activeAudio,"dub")" asp-action="Index" asp-route-cityId="@Context.Request.Query["cityId"]" asp-route-cinemaId="@Context.Request.Query["cinemaId"]" asp-route-format="@activeFormat" asp-route-audio="dub">Dub</a>
        </div>
    </div>
</div>

@if (!ordered.Any())
{
    <div class="container px-0"><div class="empty">No screenings found.</div></div>
}
else
{
    <div class="date-tabs">
        <div class="container px-0">
            <div class="wrap">
                <span class="chip active" data-chip="all">All dates</span>
                @foreach (var d in dateKeys)
                {
                    <span class="chip" data-chip="@d.ToString("yyyy-MM-dd")">@DayLabel(d)</span>
                }
            </div>
        </div>
    </div>

    @if (User.Identity?.IsAuthenticated == true &&
       (User.IsInRole("Administrator") || User.IsInRole("Operator")))
    {
        <div class="container px-0 mb-2 d-flex justify-content-end">
            <a class="btn btn-sm btn-success"
               asp-controller="Screenings" asp-action="Create">
                + Add screening
            </a>
        </div>
    }

    <div class="container px-0">
        @foreach (var g in ordered.GroupBy(x => x.StartTime.Date).OrderBy(g => g.Key))
        {
            var dayKey = g.Key.ToString("yyyy-MM-dd");
            <h3 class="day-title" id="day-@dayKey">@DayLabel(g.Key)</h3>

            <div class="row g-4" data-day="@dayKey">
                @* За деня групираме по филм и показваме всички налични часове *@
                @foreach (var movieGroup in g.GroupBy(m => m.Movie.Id))
                {
                    var first = movieGroup.First();
                    var poster = ResolvePoster(first);

                    <div class="col-12 col-md-6 col-lg-4">
                        <article class="scr-card">
                            <div class="scr-thumb">
                                <img src="@poster" alt="@first.Movie?.Title poster" loading="lazy" />
                            </div>
                            <div class="scr-body">
                                <div class="scr-title">@first.Movie?.Title</div>

                                <div class="times">
                                    @foreach (var s in movieGroup.OrderBy(m => m.StartTime))
                                    {
                                        <a class="time-btn" asp-action="SelectSeats" asp-route-id="@s.Id">
                                            @TimeLabel(s.StartTime)
                                        </a>
                                    }
                                </div>
                            </div>
                        </article>
                    </div>
                }
            </div>
        }
    </div>
}

@section Scripts {
    <script>
        (function(){
          const chips = document.querySelectorAll(".date-tabs .chip");
          let activeDate = "all";
          function applyDateFilter(){
            document.querySelectorAll("[data-day]").forEach(dayEl=>{
              const day = dayEl.getAttribute("data-day");
              dayEl.style.display = (activeDate === "all" || activeDate === day) ? "" : "none";
            });
          }
          chips.forEach(ch=>{
            ch.addEventListener("click", ()=>{
              chips.forEach(x=>x.classList.remove("active"));
              ch.classList.add("active");
              activeDate = ch.dataset.chip || "all";
              applyDateFilter();
              if(activeDate !== "all"){
                const target = document.getElementById("day-" + activeDate);
                if(target) target.scrollIntoView({behavior:"smooth", block:"start"});
              }
            });
          });
          applyDateFilter();
        })();
    </script>
}

@functions {
    private string ResolvePoster(Screening s)
    {
        var u = s?.Movie?.PosterUrl;
        if (string.IsNullOrWhiteSpace(u))
            return Url.Content("~/images/posters/_placeholder.jpg");
        u = u.Trim();
        if (u.StartsWith("http", StringComparison.OrdinalIgnoreCase)) return u;
        if (u.StartsWith("~/") || u.StartsWith("/")) return Url.Content(u);
        return Url.Content($"~/images/posters/{u}");
    }
}
